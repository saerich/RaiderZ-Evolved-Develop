#include "stdafx.h"
#include "GConst.h"
#include "GDef.h"
#include "CSMeshInfoLoader.h"
#include "CSMeshInfo.h"
#include "GActorMeshInfo.h"
#include "CSStrings.h"
#include "MLocale.h"
#include "SDef.h"

GConst::PlayerStandupTimeTable GConst::PLAYER_STANDUPTIME;

bool	GConst::AI_OPTIMIZATION								= true;
bool	GConst::PVP_MODE									= true;
bool	GConst::RUN_RESOURCE_VALIDATOR						= true;
bool	GConst::RUN_FOR_TEST								= false;

int		GConst::REGEN_TICK									= 5;
int		GConst::HP_REGEN_AMOUNT								= 15;
float	GConst::HP_REGEN_RATE_IN_COMBAT						= 3.0f;
int		GConst::EN_REGEN_AMOUNT								= 15;
float	GConst::EN_REGEN_RATE_IN_COMBAT						= 3.0f;
int		GConst::STA_REGEN_AMOUNT							= 15;
float	GConst::STA_REGEN_RATE_IN_COMBAT					= 3.0f;
float	GConst::SITTING_REGEN_RATE							= 1.5f;
bool	GConst::NPC_AI_RUNNING								= true;
bool	GConst::AUTO_PROFILE								= false;
bool	GConst::INCLUDE_DEV_FIELD_LIST						= false;
int		GConst::DYNAMICFIELD_EXPIRED_TIME					= 60;
bool	GConst::TEST_SHOW_CLIENT_NPC_MOVE_PATH				= false;
int		GConst::TEST_SHOW_CLIENT_NPC_PICKING				= 0;
bool	GConst::TEST_SHOW_CLIENT_FORMULA_DAMAGE				= false;
bool	GConst::TEST_SHOW_CLIENT_FORMULA_GUARD				= false;
bool	GConst::TEST_SHOW_NAVIGATION_MESH					= false;
bool	GConst::TEST_RANDOM_MOVE							= false;
bool	GConst::TEST_MAKE_SOLO_PARTY						= false;
bool	GConst::TEST_ENABLE_OFFLINE_PARTY_FOR_STAND_ALONE_MODE = false;

bool	GConst::TEST_MAIL_POST_TO_ONESELF					= false;
bool	GConst::TEST_ENABLE_TUTORIAL						= true;

int		GConst::PATH_NEAR_HORIZONE_RANGE = 500;
int		GConst::PATH_NEAR_VERTICAL_RANGE = 400;
wstring	GConst::REPORT_NPC_FILENAME = L"NPCReport.log";

float	GConst::VICTORY_DEFAULT_DELAY					= 1.0f;

float	GConst::INVINCIBLE_TIME_REVIVE					= 3.0f;
float	GConst::INVINCIBLE_TIME_ENTER_FIELD				= 10.0f;
int		GConst::INVINCIBLE_BUFF_ID						= 900;
int     GConst::INVISIBLETONPC_BUFF_ID					= 902;

int		GConst::STRESS_ADD_INTERRUPT_DURING_ATTACKING	= 30;
int		GConst::STRESS_ADD_LIMITED_CHASE_TIME			= 10;
float	GConst::STRESS_CHASE_INTERVAL					= 10;
int		GConst::STRESS_ADD_AVOID_MELEE_ATTACK			= 10;
int		GConst::STRESS_ADD_AVOID_RANGE_ATTACK			= 10;

float	GConst::STATE_FACTOR_FOR_DAMAGE_BY_BACK			= 1.0f;
float	GConst::STATE_FACTOR_FOR_DAMAGE[MF_SIZE]		= {0.0f,};

float	GConst::STATE_FACTOR_FOR_MF_VALUE_BY_BACK		= 1.0f;
float	GConst::STATE_FACTOR_FOR_MF_VALUE[MF_SIZE]		= {0.0f,};

int		GConst::TIME_SYNCH_INTERVAL						= 30;

int		GConst::GAME_TICK								= -1;
bool	GConst::LOG_FSM									= false;
bool	GConst::ENABLE_COLT_TIMEOUT_CHECKER				= false;
bool	GConst::SHOW_LUA_ERROR_LOG						= false;
bool	GConst::LOG_TALENT								= false;
bool	GConst::LOG_JOB									= false;
bool	GConst::LOG_SENSOR								= false;
bool	GConst::LOG_PACKET								= false;
bool	GConst::LOG_PATHFIND							= false;
bool	GConst::LOG_SCRIPT_TIMER						= false;
bool	GConst::LOG_AUTOPARTY							= false;
bool	GConst::LOG_NPCSESSION							= false;

bool	GConst::DEBUG_CREATE_CONVERT_LUAFILE			= false;
bool	GConst::TEST_AI_DEBUG_MESSAGE					= false;
bool	GConst::GODMODE_WITH_INVINCIBLE					= false;
bool	GConst::TEST_CMD_HANDLER_COMPARER				= false;

int		GConst::MAX_BUFF_QTY							= 8;
int		GConst::MAX_DEBUFF_QTY							= 8;

float	GConst::COMBAT_CHASE_MAX_DURATION_TIME			= 60.0f;

float	GConst::ROAM_DEFAULT_IDLE_TIME					= 7.0f;

float	GConst::INTERACT_QUEST_OBJECTIVE_ANI_TIME	= 2.0f;
float	GConst::LOOT_ROLL_TIME = 10.0f;

float   GConst::TARGET_INFO_OLD_SEND_TIME = 30.0f;

// 전투 관련 -----
int		GConst::NO_WEAPON_DAMAGE_LEFT = 0;
int		GConst::NO_WEAPON_DAMAGE_RIGHT = 0;
float	GConst::NPC_ASSIST_INTERVAL = 3.0f;
float	GConst::NPC_FIRSTSTRIKE_DELAY = 3.0f;
float	GConst::PRE_HIT_CHECK_TIME = 0.2f;
float	GConst::HATETABLE_ENTRY_TIMEOUT = 15.0f;
float	GConst::HATETABLE_ENTRY_PARTY_SCAN_DISTANCE = 3000;
float	GConst::NPC_FINDPATH_RADIUS_LEVEL1 = 300.0f;				// 길찾기 레벨1 적용범위
float	GConst::NPC_FINDPATH_RADIUS_LEVEL2 = 600.0f;				// 길찾기 레벨2 적용범위
float	GConst::NPC_FINDPATH_RADIUS_LEVEL3 = 1000.0f;				// 길찾기 레벨3 적용범위
float	GConst::NPC_FINDPATH_TICK_LEVEL1 = 0.5f;				// 길찾기 레벨1 갱신 틱시간
float	GConst::NPC_FINDPATH_TICK_LEVEL2 = 1.0f;				// 길찾기 레벨2 갱신 틱시간
float	GConst::NPC_FINDPATH_TICK_LEVEL3 = 2.0f;				// 길찾기 레벨3 갱신 틱시간
float	GConst::NPC_FINDPATH_TICK_OTHER = 3.0f;					// 길찾기 범위밖 갱신 틱시간
float	GConst::NPC_FINDPATH_MOVESPEED_FACTOR = 400.0f;			// 길찾기 갱신 틱시간 속도 보정치 (틱시간 * 이동속도 / 팩터)
float	GConst::NPC_DEFAULT_COMBAT_RADIUS = 10000.0f;				// NPC 기본 전투 범위 (범위를 넘어서면 전투 종료)
int		GConst::BPART_BUFFSTACK_ID = 1001;

// 부활 관련 --------------
float 	GConst::REBIRTH_VALID_DISTANCE_XY		= 300.0f;
float 	GConst::REBIRTH_VALID_DISTANCE_Z		= 100.0f;
int		GConst::REBIRTH_DEBUFF_TARGET_LEVEL		= 10;
int		GConst::REBIRTH_SOULBINDING_DEBUFF		= 1910;	
int		GConst::REBIRTH_CHECKPOINT_DEBUFF		= 1910;	
int		GConst::REBIRTH_QUESTPVP_DEBUFF			= 1903;
int		GConst::REBIRTH_QUESTPVP_BUFF			= 1904;
float	GConst::REBIRTH_SOULBINDING_RECOVER	= 0.25f;
float	GConst::REBIRTH_CHECKPOINT_RECOVER	= 0.25f;
float	GConst::REBIRTH_QUESTPVP_RECOVER		= 1.0f;
float	GConst::REBIRTH_BATTLEARENA_RECOVER	= 1.0f;


// PVP 관련 --------------
float	GConst::PVP_DURATIONTIME = 5.0f;						// 플레이어간 피격시 PVP상태 지속시간

// 마법진 관련 --------------
float	GConst::MAGICAREA_EFFECTION_PERIOD = 1.0f;

// 투명체 관련 --------------
float	GConst::INVISIBILITY_DETECT_TICK = 2.0f; // second
int		GConst::INVISIBILITY_DETECT_DISTANCE = 1200; // cm

// 포커스 관련 --------------
float	GConst::FOCUS_ADVENT_DURATION_TIME = 30.0f;
int		GConst::FOCUS_BERSERK_HIT_COUNT = 4;
float	GConst::FOCUS_BERSERK_DURATION_TIME = 10.0f;
float	GConst::FOCUS_BERSERK_RELAYHIT_TIME = 5.0f;
float	GConst::FOCUS_COUNTER_DURATION_TIME = 10.0f;
float	GConst::FOCUS_ENLIGHTEN_DURATION_TIME = 10.0f;
int		GConst::FOCUS_ENLIGHTEN_HIT_COUNT = 3;
float	GConst::FOCUS_ENLIGHTEN_RELAYHIT_TIME = 5.0f;

// 낙하 데미지 관련 ---------
int		GConst::FALLING_DEBUFF_LV1_ID = 100003;
int		GConst::FALLING_DEBUFF_LV2_ID = 100004;

// 투기장 관련 --------
int		GConst::ARENA_FIELDGROUP_ID = 50010;
int		GConst::ARENA_FIELD_ID = 50011;
float	GConst::ARENA_GAME_COUNT = 10.0f;
float	GConst::ARENA_SCOREBOARD_COUNT = 10.0f;
int		GConst::ARENA_DEATHMATCH_MAX_SCORE = 5;
float	GConst::ARENA_DEATHMATCH_REBIRTH_TIME = 30.0f;

// 최적화 관련
int		GConst::SECTOR_CROWDED_LEVEL_CAPACITY = 10;
int		GConst::SECTOR_PACKET_IGNORE_EACH_COUNT = 2;
int		GConst::SECTOR_PACKET_LIMIT_QUEUE_SIZE = 30;
int		GConst::COMMAND_CROWDED_QUEUE_SIZE = INT_MAX;
int		GConst::COMMAND_OVERFULL_QUEUE_SIZE = INT_MAX;


// NPC 시체소멸 관련 ------------
float		GConst::NPC_DECAY_TIME_NOITEM = 60;
float		GConst::NPC_DECAY_TIME_GRADE[] = {60, };

//  분노 관련 -----------------
int		GConst::HIT_RAGE_AMOUNT = 10;
int		GConst::CRIHIT_RAGE_AMOUNT = 10;

// 퀘스트 관련 -------------
float		GConst::QUEST_SHARE_DISTANCE = 5000;
float		GConst::QUEST_ESCORT_DISTANCE = 2000;
float		GConst::QUEST_OBJECTIVE_UPDATE_SHARE_DISTANCE = 10000;

// 도전자 퀘스트
int			GConst::CQ_EXPIRED_HOUR	= 4;						// 도전자 퀘스트 만료시간

// 소울바인딩
int			GConst::SOULBINDING_DEFAULT_FIELDID = 3;
int			GConst::SOULBINDING_DEFAULT_MARKERID = 1;

// DynamicField Test 관련 ------------
bool	GConst::DFTEST_ENABLE = false;
int		GConst::DFTEST_FIELDGROUP_ID = 1100000;
int		GConst::DFTEST_FIELDGROUP_QTY = 500;
float	GConst::DFTEST_SENSOR_ENTER_INTERVAL = 20.0f;

// AFK
float	GConst::AFK_TIMEOUT = 600.0f;

// 자동파티
float	GConst::AUTOPARTY_MATCH_PROCESS_INTERVAL = 5;

// 퀘스트 PVP ----------------------------

float GConst::QUESTPVP_REWARDOWNER_RELEASETIME = 90.0f;
float GConst::QUESTPVP_REWARDOWNER_DISTANCE = 3000.0f;
float GConst::QUESTPVP_INFO_SENDTIME = 30.0f;

// 길드 ----------------------------
int GConst::GUILD_CREATE_COST = 10000;

// 치팅 관련
float	GConst::CHEAT_SPEEDHACK_DISCONNECT_LIMIT_DISTANCE_RATE=2.5f;	// 스피드핵 제한거리 비율
float	GConst::CHEAT_WARPHACK_LIMIT_DISTANCE=20000.0f;	// 워프핵 제한거리
int		GConst::CHEAT_SPEEDHACK_DISCONNECT_EXECUTE_COUNT = 10; // 스피드핵 접속종료 경고횟수
float	GConst::CHEAT_SPEEDHACK_DISCONNECT_EXECUTE_DURATION=180.0f;	// 스피드핵 접속종료 경고 유지시간 (단위: 초, 이 시간동안 경고받지 않으면 초기화)
float	GConst::CHEAT_SPEEDHACK_WARNING_LIMIT_DISTANCE_RATE=1.5f;	// 스피드핵 경고 제한거리 비율
int		GConst::CHEAT_SPEEDHACK_WARNING_EXECUTE_COUNT=10;	// 스피드핵 경고로그 경고횟수
float	GConst::CHEAT_SPEEDHACK_WARNING_EXECUTE_DURATION=180.0f;	// 스피드핵 경고로그 유지시간 (단위: 초, 이 시간동안 경고받지 않으면 초기화)
bool	GConst::CHEAT_CHECK_DEVELOPER_TOO = false;

int	GConst::CONST_ENV_TIME_DAWN_START_HOUR = 4;
int	GConst::CONST_ENV_TIME_DAYTIME_START_HOUR = 7;
int	GConst::CONST_ENV_TIME_SUNSET_START_HOUR = 18;
int	GConst::CONST_ENV_TIME_NIGHT_START_HOUR = 21;

int	GConst::CONST_LOCALTIME_PER_GAMETIME_ONE_HOUR = 840;
int	GConst::CONST_ENV_TIME_UPDATE_TICK_SEC = 60;
int GConst::CONST_ENV_WEATHER_TICK_SEC = 5040;

bool GConst::ENABLE_CHEATER_DISCONNECT = false;
int GConst::DUEL_LIMIT_OBSERVE_COUNT = 64;

bool	GConst::AUTO_TEST_ACTIVE = false;
wstring	GConst::AUTO_TEST_TYPE = L"";
float	GConst::AUTO_TEST_LIMIT_FRAME = 0.0f;
int		GConst::AUTO_TEST_REPEAT = 0;
DWORD	GConst::AUTO_TEST_TIME = 0;
int		GConst::AUTO_TEST_SPEED = 0;
int		GConst::AITEST_TYPE = 0;
int     GConst::AUTO_TEST_QPVPEVENT_ID = 0;
int		GConst::AUTO_TEST_NPC_COUNT = 0;
int		GConst::AUTO_TEST_FIELD_ID = 0;
bool	GConst::SERVER_SLEEP = true;

int		GConst::LOG_CRT = 0;

bool	GConst::DEFAULT_GLOBAL_SAY = false;

float	GConst::GATHER_TIME[MAX_GATHER_TYPE][GATHER_TIER_COUNT + 1] = {{0.0f,}, };
int		GConst::GATHER_RESPAWN_TIME[MAX_GATHER_TYPE] = {180, };

int		GConst::MAX_NPC_REPORT_ALL_RECORD_QTY = 150;
int		GConst::MAX_NPC_REPORT_SPECIFIC_RECORD_QTY = 50;

bool	GConst::DEBUG_CONSOLE_SHOW_GAMETICK = false;
int		GConst::DEBUG_CONSOLE_GAMETICK_TICK = 60;
float	GConst::DEBUG_GAME_TICK_MOD_SPEED = 1.0f;
bool	GConst::DEBUG_DISABLE_DEFAULT_FIELD_SPAWN=false; // 필드 xml에 지정된 스폰을 무시

// AI Monitor -----------
bool	GConst::AIMON_ENABLE = false;
bool	GConst::AIMON_AUTO_TARGET = false;
int		GConst::AIMON_SET_FIELDID = 0;
int		GConst::AIMON_SET_SPAWNID = 0;
float	GConst::AIMON_UPDATE_INTERVAL = 1.0f;

// QuestPVP ---------------------
float	GConst::QUESTPVP_MARKPOS_REFRESH_TIME = 10.0f;

bool	GConst::DUEL_PARTY_TEST = false;


float	GConst::SPEAK_MAINTAIN_TIME = 2.5f;


#define GET_LUA_VAR(RETTYPE, NAME, VAR)		if (pLua->IsExistGlobal(NAME)) VAR = pLua->GetVar<RETTYPE>(NAME)

void GConst::Init(MWLua* pLua)
{
	GET_LUA_VAR(int,	"REGEN_TICK",					REGEN_TICK);
	GET_LUA_VAR(int,	"HP_REGEN_AMOUNT",				HP_REGEN_AMOUNT);
	GET_LUA_VAR(float,	"HP_REGEN_RATE_IN_COMBAT",		HP_REGEN_RATE_IN_COMBAT);
	GET_LUA_VAR(int,	"EN_REGEN_AMOUNT",				EN_REGEN_AMOUNT);
	GET_LUA_VAR(float,	"EN_REGEN_RATE_IN_COMBAT",		EN_REGEN_RATE_IN_COMBAT);
	GET_LUA_VAR(int,	"STA_REGEN_AMOUNT",				STA_REGEN_AMOUNT);
	GET_LUA_VAR(float,	"STA_REGEN_RATE_IN_COMBAT",		STA_REGEN_RATE_IN_COMBAT);
	GET_LUA_VAR(float,	"SITTING_REGEN_RATE",			SITTING_REGEN_RATE);

	GET_LUA_VAR(bool, "AI_OPTIMIZATION",						AI_OPTIMIZATION);
	GET_LUA_VAR(bool, "PVP_MODE",								PVP_MODE);
	GET_LUA_VAR(bool, "RUN_RESOURCE_VALIDATOR",					RUN_RESOURCE_VALIDATOR);
	GET_LUA_VAR(bool, "INCLUDE_DEV_FIELD_LIST",				INCLUDE_DEV_FIELD_LIST);
	GET_LUA_VAR(int, "CONST_DYNAMICFIELD_EXPIRED_TIME",		DYNAMICFIELD_EXPIRED_TIME);

	/// Debug 용 상수는 아래 메소드에서 초기화 합니다.
	InitDebugConst(pLua);
		
	GET_LUA_VAR(int, "STRESS_ADD_INTERRUPT_DURING_ATTACKING",	STRESS_ADD_INTERRUPT_DURING_ATTACKING);
	GET_LUA_VAR(int, "STRESS_ADD_LIMITED_CHASE_TIME",			STRESS_ADD_LIMITED_CHASE_TIME);
	GET_LUA_VAR(float, "STRESS_CHASE_INTERVAL",					STRESS_CHASE_INTERVAL);
	GET_LUA_VAR(int, "STRESS_ADD_AVOID_MELEE_ATTACK",			STRESS_ADD_AVOID_MELEE_ATTACK);
	GET_LUA_VAR(int, "STRESS_ADD_AVOID_RANGE_ATTACK",			STRESS_ADD_AVOID_RANGE_ATTACK);


	// StateFactor 읽기전 default값 설정
	for(int i = 0; i < MF_SIZE; i++)
	{
		// 0.0f으로 배열 초기화가 되어 있어, default을 재설정해야한다.
		STATE_FACTOR_FOR_DAMAGE[i] = 1.0f;
		STATE_FACTOR_FOR_MF_VALUE[i] = 1.0f;
	}

	// AI Monitor -----------
	GET_LUA_VAR(bool, "AIMON_ENABLE",			AIMON_ENABLE);
	GET_LUA_VAR(bool, "AIMON_AUTO_TARGET",		AIMON_AUTO_TARGET);
	GET_LUA_VAR(int, "AIMON_SET_FIELDID",		AIMON_SET_FIELDID);
	GET_LUA_VAR(int, "AIMON_SET_SPAWNID",		AIMON_SET_SPAWNID);
	GET_LUA_VAR(float, "AIMON_UPDATE_INTERVAL",		AIMON_UPDATE_INTERVAL);

	GET_LUA_VAR(float, "STATE_FACTOR_FOR_DAMAGE_BY_BACK",		STATE_FACTOR_FOR_DAMAGE_BY_BACK);
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_DAMAGE_BY_BEATEN",		STATE_FACTOR_FOR_DAMAGE[MF_BEATEN]);
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_DAMAGE_BY_STUN",		STATE_FACTOR_FOR_DAMAGE[MF_STUN]);
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_DAMAGE_BY_DEFLECT",	STATE_FACTOR_FOR_DAMAGE[MF_DEFLECT]);	
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_DAMAGE_BY_THROWUP",	STATE_FACTOR_FOR_DAMAGE[MF_THROWUP]);
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_DAMAGE_BY_KNOCKDOWN",	STATE_FACTOR_FOR_DAMAGE[MF_KNOCKDOWN]);
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_DAMAGE_BY_UPPERED",	STATE_FACTOR_FOR_DAMAGE[MF_UPPERED]);

	GET_LUA_VAR(float, "STATE_FACTOR_FOR_MF_VALUE_BY_BACK",		STATE_FACTOR_FOR_MF_VALUE_BY_BACK);
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_MF_VALUE_BY_BEATEN",	STATE_FACTOR_FOR_MF_VALUE[MF_BEATEN]);
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_MF_VALUE_BY_STUN",		STATE_FACTOR_FOR_MF_VALUE[MF_STUN]);
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_MF_VALUE_BY_DEFLECT",	STATE_FACTOR_FOR_MF_VALUE[MF_DEFLECT]);
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_MF_VALUE_BY_THROWUP",	STATE_FACTOR_FOR_MF_VALUE[MF_THROWUP]);
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_MF_VALUE_BY_KNOCKDOWN",STATE_FACTOR_FOR_MF_VALUE[MF_KNOCKDOWN]);
	GET_LUA_VAR(float, "STATE_FACTOR_FOR_MF_VALUE_BY_UPPERED",	STATE_FACTOR_FOR_MF_VALUE[MF_UPPERED]);


	GET_LUA_VAR(int, "TIME_SYNCH_INTERVAL",						TIME_SYNCH_INTERVAL);
	
	string strReportNpcFileName;
	GET_LUA_VAR(const char*, "REPORT_NPC_FILENAME",				strReportNpcFileName);
	REPORT_NPC_FILENAME = MLocale::ConvAnsiToUCS2(strReportNpcFileName.c_str());
	
	GET_LUA_VAR(float, "VICTORY_DEFAULT_DELAY",					VICTORY_DEFAULT_DELAY);

	GET_LUA_VAR(float,	"INVINCIBLE_TIME_REVIVE",				INVINCIBLE_TIME_REVIVE);
	GET_LUA_VAR(float,	"INVINCIBLE_TIME_ENTER_FIELD",			INVINCIBLE_TIME_ENTER_FIELD);
	GET_LUA_VAR(int,	"INVINCIBLE_BUFF_ID",					INVINCIBLE_BUFF_ID);

	GET_LUA_VAR(int,	"INVISIBLETONPC_BUFF_ID",				INVISIBLETONPC_BUFF_ID);


	// 부활 관련 --------
	GET_LUA_VAR(float,	"REBIRTH_VALID_DISTANCE_XY",			REBIRTH_VALID_DISTANCE_XY);
	GET_LUA_VAR(float,	"REBIRTH_VALID_DISTANCE_Z",				REBIRTH_VALID_DISTANCE_Z);
	GET_LUA_VAR(int,	"REBIRTH_DEBUFF_TARGET_LEVEL",			REBIRTH_DEBUFF_TARGET_LEVEL);
	GET_LUA_VAR(int,	"REBIRTH_SOULBINDING_DEBUFF",			REBIRTH_SOULBINDING_DEBUFF);
	GET_LUA_VAR(int,	"REBIRTH_CHECKPOINT_DEBUFF",			REBIRTH_CHECKPOINT_DEBUFF);
	GET_LUA_VAR(int,	"REBIRTH_QUESTPVP_DEBUFF",				REBIRTH_QUESTPVP_DEBUFF);
	GET_LUA_VAR(int,	"REBIRTH_QUESTPVP_BUFF",				REBIRTH_QUESTPVP_BUFF);
	GET_LUA_VAR(float,	"REBIRTH_SOULBINDING_RECOVERATE",		REBIRTH_SOULBINDING_RECOVER);
	GET_LUA_VAR(float,	"REBIRTH_CHECKPOINT_RECOVERATE",		REBIRTH_CHECKPOINT_RECOVER);
	GET_LUA_VAR(float,	"REBIRTH_QUESTPVP_RECOVERATE",			REBIRTH_QUESTPVP_RECOVER);
	GET_LUA_VAR(float,	"REBIRTH_BATTLEARENA_RECOVERATE",		REBIRTH_BATTLEARENA_RECOVER);


	GET_LUA_VAR(bool,	"LOG_FSM",								LOG_FSM);
	GET_LUA_VAR(bool,	"LOG_JOB",								LOG_JOB);
	GET_LUA_VAR(bool,	"LOG_SENSOR",							LOG_SENSOR);
	GET_LUA_VAR(bool,	"LOG_PACKET",							LOG_PACKET);
	GET_LUA_VAR(bool,	"LOG_PATHFIND",							LOG_PATHFIND);
	GET_LUA_VAR(bool,	"LOG_SCRIPT_TIMER",						LOG_SCRIPT_TIMER);
	GET_LUA_VAR(bool,	"LOG_AUTOPARTY",						LOG_AUTOPARTY);
	GET_LUA_VAR(bool,	"LOG_NPCSESSION",						LOG_NPCSESSION);
		
	GET_LUA_VAR(bool,	"ENABLE_COLT_TIMEOUT_CHECKER",			ENABLE_COLT_TIMEOUT_CHECKER);
	GET_LUA_VAR(bool,	"SHOW_LUA_ERROR_LOG",					SHOW_LUA_ERROR_LOG);
	GET_LUA_VAR(bool,	"LOG_TALENT",							LOG_TALENT);
	GET_LUA_VAR(bool,	"GODMODE_WITH_INVINCIBLE",				GODMODE_WITH_INVINCIBLE);
	GET_LUA_VAR(bool,	"TEST_CMD_HANDLER_COMPARER",			TEST_CMD_HANDLER_COMPARER);
				
	GET_LUA_VAR(int, "MAX_BUFF_QTY",							MAX_BUFF_QTY);
	GET_LUA_VAR(int, "MAX_DEBUFF_QTY",							MAX_DEBUFF_QTY);

	GET_LUA_VAR(float, "COMBAT_CHASE_MAX_DURATION_TIME",		COMBAT_CHASE_MAX_DURATION_TIME);
	GET_LUA_VAR(float, "ROAM_DEFAULT_IDLE_TIME",				ROAM_DEFAULT_IDLE_TIME);
	
	GET_LUA_VAR(float, "NPC_FINDPATH_RADIUS_LEVEL1",		NPC_FINDPATH_RADIUS_LEVEL1);
	GET_LUA_VAR(float, "NPC_FINDPATH_RADIUS_LEVEL2",		NPC_FINDPATH_RADIUS_LEVEL2);
	GET_LUA_VAR(float, "NPC_FINDPATH_RADIUS_LEVEL3",		NPC_FINDPATH_RADIUS_LEVEL3);
	GET_LUA_VAR(float, "NPC_FINDPATH_TICK_LEVEL1",			NPC_FINDPATH_TICK_LEVEL1);
	GET_LUA_VAR(float, "NPC_FINDPATH_TICK_LEVEL2",			NPC_FINDPATH_TICK_LEVEL2);
	GET_LUA_VAR(float, "NPC_FINDPATH_TICK_LEVEL3",			NPC_FINDPATH_TICK_LEVEL3);
	GET_LUA_VAR(float, "NPC_FINDPATH_TICK_OTHER",			NPC_FINDPATH_TICK_OTHER);
	GET_LUA_VAR(float, "NPC_FINDPATH_MOVESPEED_FACTOR",		NPC_FINDPATH_MOVESPEED_FACTOR );
	GET_LUA_VAR(float, "NPC_DEFAULT_COMBAT_RADIUS",		NPC_DEFAULT_COMBAT_RADIUS);
	
	GET_LUA_VAR(float, "INTERACT_QUEST_OBJECTIVE_ANI_TIME",		INTERACT_QUEST_OBJECTIVE_ANI_TIME);
	GET_LUA_VAR(float, "LOOT_ROLL_TIME",						LOOT_ROLL_TIME);
	GET_LUA_VAR(float, "TARGET_INFO_OLD_SEND_TIME",				TARGET_INFO_OLD_SEND_TIME);

	GET_LUA_VAR(int, "NO_WEAPON_DAMAGE_LEFT",					NO_WEAPON_DAMAGE_LEFT);
	GET_LUA_VAR(int, "NO_WEAPON_DAMAGE_RIGHT",					NO_WEAPON_DAMAGE_RIGHT);
	GET_LUA_VAR(float, "PRE_HIT_CHECK_TIME",					PRE_HIT_CHECK_TIME);
	GET_LUA_VAR(float, "HATETABLE_ENTRY_TIMEOUT",				HATETABLE_ENTRY_TIMEOUT);
	GET_LUA_VAR(float, "HATETABLE_ENTRY_PARTY_SCAN_DISTANCE",	HATETABLE_ENTRY_PARTY_SCAN_DISTANCE);

	GET_LUA_VAR(bool, "ENABLE_CHEATER_DISCONNECT",	ENABLE_CHEATER_DISCONNECT);

	GET_LUA_VAR(int, "BPART_BUFFSTACK_ID",	BPART_BUFFSTACK_ID);
	
	// 개발용 설정 처리
	GET_LUA_VAR(bool, "RUN_FOR_TEST",							RUN_FOR_TEST);

	GET_LUA_VAR(bool, "NPC_AI_RUNNING",							NPC_AI_RUNNING);
	GET_LUA_VAR(bool, "AUTO_PROFILE",							AUTO_PROFILE);
	GET_LUA_VAR(bool, "TEST_RANDOM_MOVE",						TEST_RANDOM_MOVE);
	GET_LUA_VAR(int, "GAME_TICK",								GAME_TICK);
	GET_LUA_VAR(bool, "DEBUG_CREATE_CONVERT_LUAFILE",			DEBUG_CREATE_CONVERT_LUAFILE);

	GET_LUA_VAR(int, "MAX_NPC_REPORT_ALL_RECORD_QTY",			MAX_NPC_REPORT_ALL_RECORD_QTY);
	GET_LUA_VAR(int, "MAX_NPC_REPORT_SPECIFIC_RECORD_QTY",		MAX_NPC_REPORT_SPECIFIC_RECORD_QTY);


	GET_LUA_VAR(float, "NPC_ASSIST_INTERVAL",					NPC_ASSIST_INTERVAL);

	// PVP 관련 --------------
	GET_LUA_VAR(float,	"PVP_DURATIONTIME",						PVP_DURATIONTIME);

	// 포커스 관련 --------------
	GET_LUA_VAR(float,	"FOCUS_ADVENT_DURATION_TIME",			FOCUS_ADVENT_DURATION_TIME);
	GET_LUA_VAR(int,	"FOCUS_BERSERK_HIT_COUNT",				FOCUS_BERSERK_HIT_COUNT);
	GET_LUA_VAR(float,	"FOCUS_BERSERK_DURATION_TIME",			FOCUS_BERSERK_DURATION_TIME);
	GET_LUA_VAR(float,	"FOCUS_BERSERK_RELAYHIT_TIME",			FOCUS_BERSERK_RELAYHIT_TIME);
	GET_LUA_VAR(float,	"FOCUS_COUNTER_DURATION_TIME",			FOCUS_COUNTER_DURATION_TIME);
	GET_LUA_VAR(float,	"FOCUS_ENLIGHTEN_DURATION_TIME",		FOCUS_ENLIGHTEN_DURATION_TIME);
	GET_LUA_VAR(int,	"FOCUS_ENLIGHTEN_HIT_COUNT",			FOCUS_ENLIGHTEN_HIT_COUNT);
	GET_LUA_VAR(float,	"FOCUS_ENLIGHTEN_RELAYHIT_TIME",		FOCUS_ENLIGHTEN_RELAYHIT_TIME);

	// 투명체 관련 --------------
	GET_LUA_VAR(float,	"INVISIBILITY_DETECT_TICK",				INVISIBILITY_DETECT_TICK);
	GET_LUA_VAR(int,	"INVISIBILITY_DETECT_DISTANCE",			INVISIBILITY_DETECT_DISTANCE);

	// 낙하 데미지 관련 ---------
	GET_LUA_VAR(int,	"FALLING_DEBUFF_LV1_ID",				FALLING_DEBUFF_LV1_ID);
	GET_LUA_VAR(int,	"FALLING_DEBUFF_LV2_ID",				FALLING_DEBUFF_LV2_ID);
		
	// 투기장 관련 --------
	GET_LUA_VAR(int,	"ARENA_FIELDGROUP_ID",					ARENA_FIELDGROUP_ID);
	GET_LUA_VAR(int,	"ARENA_FIELD_ID",						ARENA_FIELD_ID);
	GET_LUA_VAR(float,	"ARENA_GAME_COUNT",						ARENA_GAME_COUNT);
	GET_LUA_VAR(float,	"ARENA_SCOREBOARD_COUNT",				ARENA_SCOREBOARD_COUNT);
	GET_LUA_VAR(int,	"ARENA_DEATHMATCH_MAX_SCORE",			ARENA_DEATHMATCH_MAX_SCORE);
	GET_LUA_VAR(float,	"ARENA_DEATHMATCH_REBIRTH_TIME",		ARENA_DEATHMATCH_REBIRTH_TIME);

	// 최적화 관련
	GET_LUA_VAR(int,	"SECTOR_CROWDED_LEVEL_CAPACITY",		SECTOR_CROWDED_LEVEL_CAPACITY);
	GET_LUA_VAR(int,	"SECTOR_PACKET_IGNORE_EACH_COUNT",		SECTOR_PACKET_IGNORE_EACH_COUNT);
	GET_LUA_VAR(int,	"SECTOR_PACKET_LIMIT_QUEUE_SIZE",		SECTOR_PACKET_LIMIT_QUEUE_SIZE);
	GET_LUA_VAR(int,	"COMMAND_CROWDED_QUEUE_SIZE",			COMMAND_CROWDED_QUEUE_SIZE);
	GET_LUA_VAR(int,	"COMMAND_OVERFULL_QUEUE_SIZE",			COMMAND_OVERFULL_QUEUE_SIZE);
		
	// NPC 시체소멸 관련 ------------
	GET_LUA_VAR(float,	"NPC_DECAY_TIME_NOITEM",					NPC_DECAY_TIME_NOITEM);
	char buff[128];
	memset(NPC_DECAY_TIME_GRADE, 0, sizeof(float)*UCHAR_MAX);
	for (int i=0; i<=10; ++i)
	{
		sprintf_s(buff, "NPC_DECAY_TIME_GRADE_%d", i);
		GET_LUA_VAR(float,	buff,					NPC_DECAY_TIME_GRADE[i]);
	}

	//  분노 관련 -----------------
	GET_LUA_VAR(int,	"HIT_RAGE_AMOUNT",				HIT_RAGE_AMOUNT);
	GET_LUA_VAR(int,	"CRIHIT_RAGE_AMOUNT",			CRIHIT_RAGE_AMOUNT);

	// 퀘스트 관련 ------------
	GET_LUA_VAR(float,	"QUEST_SHARE_DISTANCE",						QUEST_SHARE_DISTANCE);
	GET_LUA_VAR(float,	"QUEST_ESCORT_DISTANCE",					QUEST_ESCORT_DISTANCE);
	GET_LUA_VAR(float,	"QUEST_OBJECTIVE_UPDATE_SHARE_DISTANCE",	QUEST_OBJECTIVE_UPDATE_SHARE_DISTANCE);
	
	// 도전자 퀘스트
	GET_LUA_VAR(int,	"CQ_EXPIRED_HOUR",			CQ_EXPIRED_HOUR);


	// 소울바인딩
	GET_LUA_VAR(int,	"SOULBINDING_DEFAULT_FIELDID",			SOULBINDING_DEFAULT_FIELDID);	
	GET_LUA_VAR(int,	"SOULBINDING_DEFAULT_MARKERID",			SOULBINDING_DEFAULT_MARKERID);	

	// 퀘스트PVP
	GET_LUA_VAR(float,	"QUESTPVP_REWARDOWNER_RELEASETIME",		QUESTPVP_REWARDOWNER_RELEASETIME);
	GET_LUA_VAR(float,	"QUESTPVP_REWARDOWNER_DISTANCE",		QUESTPVP_REWARDOWNER_DISTANCE);
	GET_LUA_VAR(float,	"QUESTPVP_INFO_SENDTIME",				QUESTPVP_INFO_SENDTIME);

	// 길드
	GET_LUA_VAR(int,	"GUILD_CREATE_COST",					GUILD_CREATE_COST);
	

	// 치팅 관련
	GET_LUA_VAR(float,	"CHEAT_SPEEDHACK_DISCONNECT_LIMIT_DISTANCE_RATE",	CHEAT_SPEEDHACK_DISCONNECT_LIMIT_DISTANCE_RATE);
	GET_LUA_VAR(float,	"CHEAT_WARPHACK_LIMIT_DISTANCE",			CHEAT_WARPHACK_LIMIT_DISTANCE);
	GET_LUA_VAR(int,	"CHEAT_SPEEDHACK_DISCONNECT_EXECUTE_COUNT",			CHEAT_SPEEDHACK_DISCONNECT_EXECUTE_COUNT);
	GET_LUA_VAR(float,	"CHEAT_SPEEDHACK_DISCONNECT_EXECUTE_DURATION",			CHEAT_SPEEDHACK_DISCONNECT_EXECUTE_DURATION);
	GET_LUA_VAR(float,	"CHEAT_SPEEDHACK_WARNING_LIMIT_DISTANCE_RATE",			CHEAT_SPEEDHACK_WARNING_LIMIT_DISTANCE_RATE);
	GET_LUA_VAR(int,	"CHEAT_SPEEDHACK_WARNING_EXECUTE_COUNT",			CHEAT_SPEEDHACK_WARNING_EXECUTE_COUNT);
	GET_LUA_VAR(float,	"CHEAT_SPEEDHACK_WARNING_EXECUTE_DURATION",			CHEAT_SPEEDHACK_WARNING_EXECUTE_DURATION);
	GET_LUA_VAR(bool,	"CHEAT_CHECK_DEVELOPER_TOO",			CHEAT_CHECK_DEVELOPER_TOO);

	// AFK
	GET_LUA_VAR(float,	"AFK_TIMEOUT",								AFK_TIMEOUT);

	GET_LUA_VAR(int,	"DUEL_LIMIT_OBSERVE_COUNT",					DUEL_LIMIT_OBSERVE_COUNT);

	// 자동파티
	GET_LUA_VAR(float,	"AUTOPARTY_MATCH_PROCESS_INTERVAL",			AUTOPARTY_MATCH_PROCESS_INTERVAL);

	// 시간,날씨 정보 ------------
	GET_LUA_VAR(int,	"CONST_ENV_TIME_DAWN_START_HOUR",			CONST_ENV_TIME_DAWN_START_HOUR);
	GET_LUA_VAR(int,	"CONST_ENV_TIME_DAYTIME_START_HOUR",		CONST_ENV_TIME_DAYTIME_START_HOUR);
	GET_LUA_VAR(int,	"CONST_ENV_TIME_SUNSET_START_HOUR",			CONST_ENV_TIME_SUNSET_START_HOUR);
	GET_LUA_VAR(int,	"CONST_ENV_TIME_NIGHT_START_HOUR",			CONST_ENV_TIME_NIGHT_START_HOUR);
	GET_LUA_VAR(int,	"CONST_LOCALTIME_PER_GAMETIME_ONE_HOUR",	CONST_LOCALTIME_PER_GAMETIME_ONE_HOUR);
	GET_LUA_VAR(int,	"CONST_ENV_TIME_UPDATE_TICK_SEC",			CONST_ENV_TIME_UPDATE_TICK_SEC);
	GET_LUA_VAR(int,	"CONST_ENV_WEATHER_TICK_SEC",				CONST_ENV_WEATHER_TICK_SEC);

	// Auto Tet 관련 ------------
	GET_LUA_VAR(bool,	"AUTO_TEST_ACTIVE",							AUTO_TEST_ACTIVE);
	
	string strAutoTestType;
	GET_LUA_VAR(const char*,	"AUTO_TEST_TYPE",					strAutoTestType);
	AUTO_TEST_TYPE = MLocale::ConvAnsiToUCS2(strAutoTestType.c_str());

	GET_LUA_VAR(float,	"AUTO_TEST_LIMIT_FRAME",					AUTO_TEST_LIMIT_FRAME);
	GET_LUA_VAR(int,	"AUTO_TEST_REPEAT",							AUTO_TEST_REPEAT);
	GET_LUA_VAR(DWORD,	"AUTO_TEST_TIME",							AUTO_TEST_TIME);
	GET_LUA_VAR(int,	"AUTO_TEST_SPEED",							AUTO_TEST_SPEED);
	GET_LUA_VAR(int,	"AUTO_TEST_NPC_COUNT",						AUTO_TEST_NPC_COUNT);
	GET_LUA_VAR(int,	"AUTO_TEST_FIELD_ID",						AUTO_TEST_FIELD_ID);
	GET_LUA_VAR(int,	"AUTO_TEST_QPVPEVENT_ID",					AUTO_TEST_QPVPEVENT_ID);	

	GET_LUA_VAR(int,	"AITEST_TYPE",								AITEST_TYPE);	


	GET_LUA_VAR(bool,	"SERVER_SLEEP",								SERVER_SLEEP);

	GET_LUA_VAR(int,	"LOG_CRT",									LOG_CRT);

	// 채팅관련 ----
	GET_LUA_VAR(bool,	"DEFAULT_GLOBAL_SAY",						DEFAULT_GLOBAL_SAY);
		
	// DynamicField Test 관련 ------------
	GET_LUA_VAR(bool,	"DFTEST_ENABLE",							DFTEST_ENABLE);
	GET_LUA_VAR(int,	"DFTEST_FIELDGROUP_ID",						DFTEST_FIELDGROUP_ID);
	GET_LUA_VAR(int,	"DFTEST_FIELDGROUP_QTY",					DFTEST_FIELDGROUP_QTY);
	GET_LUA_VAR(float,	"DFTEST_SENSOR_ENTER_INTERVAL",				DFTEST_SENSOR_ENTER_INTERVAL);

	// 채집관련 ----
	char szType[MAX_GATHER_TYPE][255] = {
		"GATHER_TIME_MINE_TIER_",
		"GATHER_TIME_HERB_TIER_",
		"GATHER_TIME_RELIC_TIER_",
		"GATHER_TIME_LUMBER_TIER_"
	};

	for(int i = 0; i < MAX_GATHER_TYPE; i++)
	{
		for(int j = 1; j < GATHER_TIER_COUNT+1; j++)
		{
			char szValue[255];
			sprintf_s(szValue, "%s%d", szType[i], j);

			GET_LUA_VAR(float,	szValue, GATHER_TIME[i][j]);
		}
	}
	GET_LUA_VAR(int,	"GATHER_RESPAWN_TIME_MINE",					GATHER_RESPAWN_TIME[GATHER_MINE]);
	GET_LUA_VAR(int,	"GATHER_RESPAWN_TIME_HERB",					GATHER_RESPAWN_TIME[GATHER_HERB]);
	GET_LUA_VAR(int,	"GATHER_RESPAWN_TIME_RELIC",				GATHER_RESPAWN_TIME[GATHER_RELIC]);
	GET_LUA_VAR(int,	"GATHER_RESPAWN_TIME_LUMBER",				GATHER_RESPAWN_TIME[GATHER_LUMBER]);


	GET_LUA_VAR(bool,	"DEBUG_CONSOLE_SHOW_GAMETICK",				DEBUG_CONSOLE_SHOW_GAMETICK);
	GET_LUA_VAR(int,	"DEBUG_CONSOLE_GAMETICK_TICK",				DEBUG_CONSOLE_GAMETICK_TICK);
	GET_LUA_VAR(float,	"DEBUG_GAME_TICK_MOD_SPEED",				DEBUG_GAME_TICK_MOD_SPEED);
	GET_LUA_VAR(bool,	"DEBUG_DISABLE_DEFAULT_FIELD_SPAWN",		DEBUG_DISABLE_DEFAULT_FIELD_SPAWN);

	GET_LUA_VAR(bool,	"DUEL_PARTY_TEST",							DUEL_PARTY_TEST);
	
	// QuestPVP ------
	GET_LUA_VAR(float, "NPC_MARKPOS_TIME",							QUESTPVP_MARKPOS_REFRESH_TIME);


	GET_LUA_VAR(float, "SPEAK_MAINTAIN_TIME",						SPEAK_MAINTAIN_TIME);

	
	PLAYER_STANDUPTIME.Init();
}

void GConst::InitDebugConst(MWLua* pLua)
{
	GET_LUA_VAR(bool, "TEST_AI_DEBUG_MESSAGE",					TEST_AI_DEBUG_MESSAGE);
	GET_LUA_VAR(bool, "TEST_SHOW_CLIENT_NPC_MOVE_PATH",			TEST_SHOW_CLIENT_NPC_MOVE_PATH);
	GET_LUA_VAR(int, "TEST_SHOW_CLIENT_NPC_PICKING",			TEST_SHOW_CLIENT_NPC_PICKING);
	GET_LUA_VAR(bool, "TEST_SHOW_NAVIGATION_MESH",				TEST_SHOW_NAVIGATION_MESH);
	GET_LUA_VAR(bool, "TEST_SHOW_CLIENT_FORMULA_DAMAGE",		TEST_SHOW_CLIENT_FORMULA_DAMAGE);
	GET_LUA_VAR(bool, "TEST_SHOW_CLIENT_FORMULA_GUARD",			TEST_SHOW_CLIENT_FORMULA_GUARD);
	GET_LUA_VAR(bool, "TEST_MAKE_SOLO_PARTY",					TEST_MAKE_SOLO_PARTY);	
	GET_LUA_VAR(bool, "TEST_ENABLE_OFFLINE_PARTY_FOR_STAND_ALONE_MODE", TEST_ENABLE_OFFLINE_PARTY_FOR_STAND_ALONE_MODE);
	GET_LUA_VAR(bool, "TEST_MAIL_POST_TO_ONESELF",				TEST_MAIL_POST_TO_ONESELF);
	GET_LUA_VAR(bool, "TEST_ENABLE_TUTORIAL",					TEST_ENABLE_TUTORIAL);
}

void GConst::PlayerStandupTimeTable::Init()
{
	CSMeshInfoMgr		meshInfoMgr;
	CSMeshInfoLoader	meshInfoLoader;
	if(!meshInfoLoader.LoadMeshInfo(&meshInfoMgr, FILENAME_MESH_INFO))
	{
		assert(false);
		return;
	}

	CSMeshInfo* pinfoHumanFemale = meshInfoMgr.GetInfo(L"hf");
	if (!pinfoHumanFemale)
	{
		assert(false);
		return;
	}

	ZeroMemory(m_fPlayerStandupTime, sizeof(m_fPlayerStandupTime));
	
	GActorMeshInfo infoMesh;
	infoMesh.Init(pinfoHumanFemale, 1.0f);
	infoMesh.SetForPlayer();
	for (int t=0; t<WEAPON_MAX; ++t)
	{
		wstring strAnimName = CSStrings::WeaponType(t);
		strAnimName += L"_MF_KD3";

		m_fPlayerStandupTime[t] = infoMesh.GetAnimationTime(strAnimName);
	}
}

float GConst::PlayerStandupTimeTable::GetStandupTime(WEAPON_TYPE nWeaponType)
{
	VALID_RET(nWeaponType >= 0, -1.0f);
	VALID_RET(nWeaponType < WEAPON_MAX, -1.0f);

	return m_fPlayerStandupTime[nWeaponType];
}

int GConst::GetFirstEnterFieldID()
{
	if (GConst::TEST_ENABLE_TUTORIAL)
	{
		return FIRST_TUTORIAL_FIELD_ID;
	}
	else
	{
		return FIRST_ENTER_FIELD_ID;
	}
}
